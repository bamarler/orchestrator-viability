import os
import json
from datetime import datetime
from typing import Optional, Any
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class AgentLogger:
    """Logger for multi-agent system communications."""
    
    def __init__(self, log_type: str):
        """
        Initialize logger.
        
        Args:
            log_type: Either 'orchestrator' or 'swarm'
        """
        self._ensure_directories()
        self.log_type = log_type
        self.log_file = None
        self.log_number = self._get_next_log_number()
        self._init_log_file()
    
    def _ensure_directories(self):
        """Ensure logs and reports directories exist."""
        os.makedirs('logs', exist_ok=True)
        os.makedirs('reports', exist_ok=True)
    
    def _get_next_log_number(self) -> int:
        """Get the next available log number."""
        existing_logs = [f for f in os.listdir('logs') if f.startswith(f'{self.log_type}_log_')]
        if not existing_logs:
            return 1
        
        numbers = []
        for log in existing_logs:
            try:
                num = int(log.split('_')[-1].replace('.txt', ''))
                numbers.append(num)
            except:
                continue
        
        return max(numbers) + 1 if numbers else 1
    
    def _init_log_file(self):
        """Initialize the log file."""
        self.log_filename = f'logs/{self.log_type}_log_{self.log_number}.txt'
        with open(self.log_filename, 'w') as f:
            f.write(f"{'='*60}\n")
            f.write(f"{self.log_type.upper()} TEAM LOG - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"{'='*60}\n\n")
    
    def log(self, agent_name: str, message: str, metadata: Optional[dict] = None):
        """
        Log a message from an agent.
        
        Args:
            agent_name: Name of the agent logging the message
            message: The message to log
            metadata: Optional metadata to include
        """
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        # Format the log entry
        log_entry = f"[{timestamp}] {agent_name}: {message}"
        
        if metadata:
            log_entry += f" | Metadata: {json.dumps(metadata, indent=0)}"
        
        # Write to file
        with open(self.log_filename, 'a') as f:
            f.write(log_entry + '\n')
    
    def log_separator(self, title: str = ""):
        """Add a separator line to the log."""
        with open(self.log_filename, 'a') as f:
            if title:
                f.write(f"\n--- {title} ---\n")
            else:
                f.write("\n" + "-"*40 + "\n")
    
    def get_log_filename(self) -> str:
        """Get the current log filename."""
        return self.log_filename
    
    def get_log_number(self) -> int:
        """Get the current log number."""
        return self.log_number

def save_report(report: str, team_type: str, task: str, log_number: int) -> str:
    """
    Save a report to file.
    
    Args:
        report: The report content
        team_type: Either 'orchestrator' or 'swarm'
        task: The task description
        log_number: The log number to match with the log file
        
    Returns:
        The filename where the report was saved
    """
    # Ensure reports directory exists
    os.makedirs('reports', exist_ok=True)
    
    # Create filename
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    safe_task = task[:50].replace('/', '_').replace(' ', '_')
    filename = f'reports/{team_type}_report_{log_number}_{timestamp}_{safe_task}.md'
    
    # Save report with metadata
    with open(filename, 'w') as f:
        f.write(f"# Report Generated by {team_type.capitalize()} Team\n\n")
        f.write(f"**Task**: {task}\n")
        f.write(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"**Log File**: {team_type}_log_{log_number}.txt\n")
        f.write(f"\n{'='*60}\n\n")
        f.write(report)
    
    return filename

def log_tool_execution(logger: AgentLogger, agent_name: str, tool_name: str, 
                      tool_input: str, result: str):
    """Log tool execution details."""
    logger.log(
        agent_name,
        f"Executing tool '{tool_name}'",
        {
            "tool": tool_name,
            "input": tool_input[:100] + "..." if len(tool_input) > 100 else tool_input,
            "result_preview": result[:100] + "..." if len(result) > 100 else result
        }
    )

def log_agent_communication(logger: AgentLogger, from_agent: str, to_agent: str, 
                           message: str, instruction: Optional[str] = None):
    """Log communication between agents."""
    comm_msg = f"Communicating with {to_agent}"
    metadata = {"to": to_agent, "message_preview": message[:100] + "..."}
    
    if instruction:
        metadata["instruction"] = instruction[:100] + "..."
    
    logger.log(from_agent, comm_msg, metadata)